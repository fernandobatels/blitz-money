/* generated by rust_qt_binding_generator */
#include "qtbindings.h"

namespace {

    struct option_quintptr {
    public:
        quintptr value;
        bool some;
        operator QVariant() const {
            if (some) {
                return QVariant::fromValue(value);
            }
            return QVariant();
        }
    };
    static_assert(std::is_pod<option_quintptr>::value, "option_quintptr must be a POD type.");

    typedef void (*qstring_set)(QString* val, const char* utf8, int nbytes);
    void set_qstring(QString* val, const char* utf8, int nbytes) {
        *val = QString::fromUtf8(utf8, nbytes);
    }

    struct qmodelindex_t {
        int row;
        quintptr id;
    };
    inline QVariant cleanNullQVariant(const QVariant& v) {
        return (v.isNull()) ?QVariant() :v;
    }
}
extern "C" {
    void accounts_data_bank(const Accounts::Private*, int, QString*, qstring_set);
    bool accounts_set_data_bank(Accounts::Private*, int, const ushort* s, int len);
    void accounts_data_name(const Accounts::Private*, int, QString*, qstring_set);
    bool accounts_set_data_name(Accounts::Private*, int, const ushort* s, int len);
    void accounts_data_uuid(const Accounts::Private*, int, QString*, qstring_set);
    bool accounts_set_data_uuid(Accounts::Private*, int, const ushort* s, int len);
    void accounts_sort(Accounts::Private*, unsigned char column, Qt::SortOrder order = Qt::AscendingOrder);

    int accounts_row_count(const Accounts::Private*);
    bool accounts_insert_rows(Accounts::Private*, int, int);
    bool accounts_remove_rows(Accounts::Private*, int, int);
    bool accounts_can_fetch_more(const Accounts::Private*);
    void accounts_fetch_more(Accounts::Private*);
}
int Accounts::columnCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : 3;
}

bool Accounts::hasChildren(const QModelIndex &parent) const
{
    return rowCount(parent) > 0;
}

int Accounts::rowCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : accounts_row_count(m_d);
}

bool Accounts::insertRows(int row, int count, const QModelIndex &)
{
    return accounts_insert_rows(m_d, row, count);
}

bool Accounts::removeRows(int row, int count, const QModelIndex &)
{
    return accounts_remove_rows(m_d, row, count);
}

QModelIndex Accounts::index(int row, int column, const QModelIndex &parent) const
{
    if (!parent.isValid() && row >= 0 && row < rowCount(parent) && column >= 0 && column < 3) {
        return createIndex(row, column, (quintptr)row);
    }
    return QModelIndex();
}

QModelIndex Accounts::parent(const QModelIndex &) const
{
    return QModelIndex();
}

bool Accounts::canFetchMore(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : accounts_can_fetch_more(m_d);
}

void Accounts::fetchMore(const QModelIndex &parent)
{
    if (!parent.isValid()) {
        accounts_fetch_more(m_d);
    }
}
void Accounts::updatePersistentIndexes() {}

void Accounts::sort(int column, Qt::SortOrder order)
{
    accounts_sort(m_d, column, order);
}
Qt::ItemFlags Accounts::flags(const QModelIndex &i) const
{
    auto flags = QAbstractItemModel::flags(i);
    if (i.column() == 0) {
        flags |= Qt::ItemIsEditable;
    }
    if (i.column() == 1) {
        flags |= Qt::ItemIsEditable;
    }
    if (i.column() == 2) {
        flags |= Qt::ItemIsEditable;
    }
    return flags;
}

QString Accounts::bank(int row) const
{
    QString s;
    accounts_data_bank(m_d, row, &s, set_qstring);
    return s;
}

bool Accounts::setBank(int row, const QString& value)
{
    bool set = false;
    set = accounts_set_data_bank(m_d, row, value.utf16(), value.length());
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        emit dataChanged(index, index);
    }
    return set;
}

QString Accounts::name(int row) const
{
    QString s;
    accounts_data_name(m_d, row, &s, set_qstring);
    return s;
}

bool Accounts::setName(int row, const QString& value)
{
    bool set = false;
    set = accounts_set_data_name(m_d, row, value.utf16(), value.length());
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        emit dataChanged(index, index);
    }
    return set;
}

QString Accounts::uuid(int row) const
{
    QString s;
    accounts_data_uuid(m_d, row, &s, set_qstring);
    return s;
}

bool Accounts::setUuid(int row, const QString& value)
{
    bool set = false;
    set = accounts_set_data_uuid(m_d, row, value.utf16(), value.length());
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        emit dataChanged(index, index);
    }
    return set;
}

QVariant Accounts::data(const QModelIndex &index, int role) const
{
    Q_ASSERT(rowCount(index.parent()) > index.row());
    switch (index.column()) {
    case 0:
        switch (role) {
        case Qt::UserRole + 0:
            return QVariant::fromValue(bank(index.row()));
        case Qt::UserRole + 1:
            return QVariant::fromValue(name(index.row()));
        case Qt::DisplayRole:
        case Qt::EditRole:
        case Qt::UserRole + 2:
            return QVariant::fromValue(uuid(index.row()));
        }
        break;
    case 1:
        switch (role) {
        case Qt::DisplayRole:
        case Qt::EditRole:
        case Qt::UserRole + 1:
            return QVariant::fromValue(name(index.row()));
        }
        break;
    case 2:
        switch (role) {
        case Qt::DisplayRole:
        case Qt::EditRole:
        case Qt::UserRole + 0:
            return QVariant::fromValue(bank(index.row()));
        }
        break;
    }
    return QVariant();
}

int Accounts::role(const char* name) const {
    auto names = roleNames();
    auto i = names.constBegin();
    while (i != names.constEnd()) {
        if (i.value() == name) {
            return i.key();
        }
        ++i;
    }
    return -1;
}
QHash<int, QByteArray> Accounts::roleNames() const {
    QHash<int, QByteArray> names = QAbstractItemModel::roleNames();
    names.insert(Qt::UserRole + 0, "bank");
    names.insert(Qt::UserRole + 1, "name");
    names.insert(Qt::UserRole + 2, "uuid");
    return names;
}
QVariant Accounts::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (orientation != Qt::Horizontal) {
        return QVariant();
    }
    return m_headerData.value(qMakePair(section, (Qt::ItemDataRole)role), role == Qt::DisplayRole ?QString::number(section + 1) :QVariant());
}

bool Accounts::setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role)
{
    if (orientation != Qt::Horizontal) {
        return false;
    }
    m_headerData.insert(qMakePair(section, (Qt::ItemDataRole)role), value);
    return true;
}

bool Accounts::setData(const QModelIndex &index, const QVariant &value, int role)
{
    if (index.column() == 0) {
        if (role == Qt::UserRole + 0) {
            if (value.canConvert(qMetaTypeId<QString>())) {
                return setBank(index.row(), value.value<QString>());
            }
        }
        if (role == Qt::UserRole + 1) {
            if (value.canConvert(qMetaTypeId<QString>())) {
                return setName(index.row(), value.value<QString>());
            }
        }
        if (role == Qt::DisplayRole || role == Qt::EditRole || role == Qt::UserRole + 2) {
            if (value.canConvert(qMetaTypeId<QString>())) {
                return setUuid(index.row(), value.value<QString>());
            }
        }
    }
    if (index.column() == 1) {
        if (role == Qt::DisplayRole || role == Qt::EditRole || role == Qt::UserRole + 1) {
            if (value.canConvert(qMetaTypeId<QString>())) {
                return setName(index.row(), value.value<QString>());
            }
        }
    }
    if (index.column() == 2) {
        if (role == Qt::DisplayRole || role == Qt::EditRole || role == Qt::UserRole + 0) {
            if (value.canConvert(qMetaTypeId<QString>())) {
                return setBank(index.row(), value.value<QString>());
            }
        }
    }
    return false;
}

extern "C" {
    Accounts::Private* accounts_new(Accounts*,
        void (*)(const Accounts*),
        void (*)(Accounts*),
        void (*)(Accounts*),
        void (*)(Accounts*, quintptr, quintptr),
        void (*)(Accounts*),
        void (*)(Accounts*),
        void (*)(Accounts*, int, int),
        void (*)(Accounts*),
        void (*)(Accounts*, int, int, int),
        void (*)(Accounts*),
        void (*)(Accounts*, int, int),
        void (*)(Accounts*));
    void accounts_free(Accounts::Private*);
};

Accounts::Accounts(bool /*owned*/, QObject *parent):
    QAbstractItemModel(parent),
    m_d(0),
    m_ownsPrivate(false)
{
    initHeaderData();
}

Accounts::Accounts(QObject *parent):
    QAbstractItemModel(parent),
    m_d(accounts_new(this,
        [](const Accounts* o) {
            emit o->newDataReady(QModelIndex());
        },
        [](Accounts* o) {
            emit o->layoutAboutToBeChanged();
        },
        [](Accounts* o) {
            o->updatePersistentIndexes();
            emit o->layoutChanged();
        },
        [](Accounts* o, quintptr first, quintptr last) {
            o->dataChanged(o->createIndex(first, 0, first),
                       o->createIndex(last, 2, last));
        },
        [](Accounts* o) {
            o->beginResetModel();
        },
        [](Accounts* o) {
            o->endResetModel();
        },
        [](Accounts* o, int first, int last) {
            o->beginInsertRows(QModelIndex(), first, last);
        },
        [](Accounts* o) {
            o->endInsertRows();
        },
        [](Accounts* o, int first, int last, int destination) {
            o->beginMoveRows(QModelIndex(), first, last, QModelIndex(), destination);
        },
        [](Accounts* o) {
            o->endMoveRows();
        },
        [](Accounts* o, int first, int last) {
            o->beginRemoveRows(QModelIndex(), first, last);
        },
        [](Accounts* o) {
            o->endRemoveRows();
        }
)),
    m_ownsPrivate(true)
{
    connect(this, &Accounts::newDataReady, this, [this](const QModelIndex& i) {
        this->fetchMore(i);
    }, Qt::QueuedConnection);
    initHeaderData();
}

Accounts::~Accounts() {
    if (m_ownsPrivate) {
        accounts_free(m_d);
    }
}
void Accounts::initHeaderData() {
    m_headerData.insert(qMakePair(0, Qt::DisplayRole), QVariant("uuid"));
    m_headerData.insert(qMakePair(1, Qt::DisplayRole), QVariant("name"));
    m_headerData.insert(qMakePair(2, Qt::DisplayRole), QVariant("bank"));
}
